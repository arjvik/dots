# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {
    'proxy-netshare': 'set content.proxy http://192.168.49.1:8282/',
    'proxy-ssh': 'set content.proxy socks://localhost:9050/',
    'proxy-utsw': 'set content.proxy http://proxy.swmed.edu:3128/',
    'proxy-off': 'set content.proxy system',
    'classroom-switch-account': 'jseval window.location.href=window.location.href.replace("/u/0","/u/1")',
    'medium-unblock': 'open javascript:fetch(window.location.href,{credentials:"omit",redirect:"follow",mode:"no-cors"}).then(b=>b.text()).then(b=>document.querySelector("html").innerHTML=b.replace(/<\\/?noscript>/g,""))',
    'qute-lastpass': 'spawn --userscript qute-lastpass.zsh',
    'qute-lastpass-pw-only': 'spawn --userscript qute-lastpass.zsh -p',
    'qute-lastpass-old': 'spawn --userscript qute-lastpass',
    'qute-lastpass-old-pw-only': 'spawn --userscript qute-lastpass -w',
    'outline-unblock': 'open https://outline.com/{url}',
    'twelveft-unblock': 'open https://12ft.io/{url}',
    'quora-unblock': 'open {url}?share',
    'easybib-unblock': 'jseval for (d of document.getElementsByTagName("div")) if (d.style["z-index"]>=9999) d.style["display"]="none";',
    'disable-cert-validation': 'set content.tls.certificate_errors load-insecurely ;; message-error "SSL certificate validation DISABLED!"',
    'youtube-speed': 'jseval document.querySelector("video, audio").playbackRate = parseFloat(prompt("Enter playback speed"))',
    'create-qr-code': 'open -t https://api.qrserver.com/v1/create-qr-code/?size=300x300&qzone=1&data={url}',
    'invert-colors': 'jseval document.documentElement.style.filter+=" invert(100%)"',
    'autofill-name': 'fake-key Vikram<tab>Arjun<tab>',
    'q': 'quit',
    'w': 'session-save',
    'wq': 'quit --save'
}

# Always restore open sites when qutebrowser is reopened.
# Type: Bool
c.auto_save.session = False

# List of URLs of lists which contain hosts to block.  The file can be
# in one of the following formats:  - An `/etc/hosts`-like file - One
# host per line - A zip-file of any of the above, with either only one
# file, or a file   named `hosts` (with any extension).  It's also
# possible to add a local file or directory via a `file://` URL. In case
# of a directory, all files in the directory are read as adblock lists.
# The file `~/.config/qutebrowser/blocked-hosts` is always read if it
# exists.
# Type: List of Url
c.content.blocking.method = "hosts"
c.content.blocking.hosts.lists = ['https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts']

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')
config.set('content.javascript.enabled', True, 'chrome://*/*')
config.set('content.javascript.enabled', True, 'qute://*/*')

# Proxy to use. In addition to the listed values, you can use a
# `socks://...` or `http://...` URL.
# Type: Proxy
# Valid values:
#   - system: Use the system wide proxy.
#   - none: Don't use any proxy
c.content.proxy = 'system'

# Allow websites to register protocol handlers via
# `navigator.registerProtocolHandler`.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.register_protocol_handler', True, 'https://mail.google.com/*')

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['gedit', '{file}']

# Automatically enter insert mode if an editable element is focused
# after loading the page.
# Type: Bool
c.input.insert_mode.auto_load = True

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'https://arjvik.github.io/tab'

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://google.com/search?query={}'}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'https://arjvik.github.io/tab'

## Directory to save downloads to. If unset, a sensible OS-specific
## default is used.
## Type: Directory
c.downloads.location.directory = '/tmp'

c.fonts.default_family = "Noto Mono Nerd Font"

# Bindings for normal mode
config.bind('<Alt+0>', 'tab-focus -1')
config.bind('<Alt+9>', 'tab-focus 9')
config.bind('<Alt+Left>', 'back')
config.bind('<Alt+Right>', 'forward')
config.bind('<Ctrl+Shift+e>', 'edit-url')
config.bind('[[', 'navigate decrement')
config.bind(']]', 'navigate increment')
config.bind('{{', 'navigate prev')
config.bind('}}', 'navigate next')
config.bind('wi', 'devtools window')
config.bind('yf', 'hint all yank')
config.bind('qm', 'medium-unblock')
config.bind('qp', 'qute-lastpass')
config.bind('qP', 'qute-lastpass-pw-only')
config.bind('qlp', 'qute-lastpass-old')
config.bind('qlP', 'qute-lastpass-old-pw-only')
config.bind('qo', 'outline-unblock')
config.bind('qt', 'twelveft-unblock')
config.bind('qu', 'quora-unblock')
config.bind('qi', 'invert-colors')
config.bind('qbo', 'proxy-netshare')
config.bind('qbs', 'proxy-ssh')
config.bind('qbu', 'proxy-utsw')
config.bind('qbx', 'proxy-off')
config.bind('qc', 'classroom-switch-account')
config.bind('qe', 'easybib-unblock')
config.bind('qv', 'disable-cert-validation')
config.bind('qf', 'autofill-name')
config.bind('qy', 'youtube-speed')
config.bind('qr', 'create-qr-code')

config.unbind('<Ctrl+a>')
config.unbind('<Ctrl+x>')
config.unbind('q')

# Bindings for insert mode
config.bind('<Alt+Left>', 'back', mode='insert')
config.bind('<Alt+Right>', 'forward', mode='insert')
config.bind('<Alt+0>', 'tab-focus -1', mode='insert')
config.bind('<Alt+1>', 'tab-focus 1', mode='insert')
config.bind('<Alt+2>', 'tab-focus 2', mode='insert')
config.bind('<Alt+3>', 'tab-focus 3', mode='insert')
config.bind('<Alt+4>', 'tab-focus 4', mode='insert')
config.bind('<Alt+5>', 'tab-focus 5', mode='insert')
config.bind('<Alt+6>', 'tab-focus 6', mode='insert')
config.bind('<Alt+7>', 'tab-focus 7', mode='insert')
config.bind('<Alt+8>', 'tab-focus 8', mode='insert')
config.bind('<Alt+9>', 'tab-focus 9', mode='insert')

# Qutebrowser Nord Theme
config.source('nord-qutebrowser.py')

# Context menu theming

## Background color of the context menu.
## Type: QssColor

c.colors.contextmenu.menu.bg = '#2e3440'
c.colors.contextmenu.selected.bg = '#434c5e'

## Foreground color of the context menu.
## Type: QssColor

c.colors.contextmenu.menu.fg = '#e5e9f0'
c.colors.contextmenu.selected.fg = '#eceff4'

if 'disabled' in dir(c.colors.contextmenu):
	## Background color of disabled items in the context menu.
	## Type: QssColor
	c.colors.contextmenu.disabled.bg = '#2e3440'

	## Foreground color of disabled items in the context menu.
	## Type: QssColor
	c.colors.contextmenu.disabled.fg = '#76777a'
